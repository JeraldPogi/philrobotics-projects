     1: /*****************************************************************************************//**
     2: * # PhilRobotics | Philippine Electronics and Robotics Enthusiasts Club #
     3: * http://philrobotics.com | http://philrobotics.com/forum | http://facebook.com/philrobotics
     4: * phirobotics.core@philrobotics.com
     5: *
     6: *---------------------------------------------------------------------------------------------
     7: * |Filename:      | "corelib_16bit_timer.c"                     |
     8: * |:----          |:----                                        |
     9: * |Description:   | This is a library for using the 16bit timer functions |
    10: * |Revision:      | v00.02.00                                   |
    11: * |Author:        | Efren S. Cruzat II                          |
    12: * |               |                                             |
    13: * |Dependencies:  |                                             |
    14: *
    15: * > This program is free software: you can redistribute it and/or modify
    16: * > it under the terms of the GNU General Public License as published by
    17: * > the Free Software Foundation, either version 3 of the License, or
    18: * > (at your option) any later version.
    19: * > This program is distributed in the hope that it will be useful,
    20: * > but WITHOUT ANY WARRANTY; without even the implied warranty of
    21: * > MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    22: * > GNU General Public License for more details.
    23: * > <BR><BR>
    24: * > You should have received a copy of the GNU General Public License
    25: * > along with this program. If not, see http://www.gnu.org/licenses/
    26: * <BR>
    27: *---------------------------------------------------------------------------------------------
    28: * |FW Version   |Date       |Author             |Description                        |
    29: * |:----        |:----      |:----              |:----                              |
    30: * |v00.00.01    |20130323   |ESCII              |Library Initial Release            |
    31: * |v00.01.00    |20130408   |ESCII              |Function made independent from ADC |
    32: * |v00.02.00    |20130514   |ESCII              |Code Formatted                     |
    33: *********************************************************************************************/
    34: #define __SHOW_MODULE_HEADER__ /*!< \brief This section includes the Module Header on the documentation */
    35: #undef  __SHOW_MODULE_HEADER__
    36: 
    37: #include "corelib_16bit_timer.h"
    38: 
    39: /* Local Constants */
    40: /* none */
    41: 
    42: /* Local Variables */
    43: /* none */
    44: 
    45: /* Private Function Prototypes */
    46: /* none */
    47: 
    48: /* Public Functions */
    49: /*******************************************************************************//**
    50: * \brief 16bit timer interrupt service routine
    51: *
    52: * > This is an interrupt handler called when the 16bit timer value expires
    53: *
    54: * > <BR>
    55: * > **Syntax:**<BR>
    56: * >     timer16BitISR() , ISR
    57: * > <BR><BR>
    58: * > **Parameters:**<BR>
    59: * >     none
    60: * > <BR><BR>
    61: * > **Returns:**<BR>
    62: * >     none
    63: * > <BR><BR>
    64: ***********************************************************************************/
    65: void timer16BitISR(void)
    66: {
    67: #if(TIMER_16BIT_ENABLED == TRUE)
    68: 
    69:     if(hal_getTMR1IntFlag() && hal_getTMR1IntEnableStatus())
    70:     {
    71:         /* disable TMR1 Module */
    72:         hal_disableTMR1();
    73:         hal_disableTMR1Int();
    74:         hal_clrTMR1IntFlag();
    75:         /* call user ISR */
    76:         pt2TMR1ISR();
    77:     }
    78: 
    79: #endif
    80: }
    81: 
    82: #if(TIMER_16BIT_ENABLED == TRUE)
    83: /*******************************************************************************//**
    84: * \brief Setup the 16bit timer peripheral count resolution
    85: *
    86: * > This function is called to setup the 16bit timer peripheral count resolution
    87: *
    88: * > <BR>
    89: * > **Syntax:**<BR>
    90: * >      setup16BitTimerFull(module, &callback, prescaler, postscaler)
    91: * > <BR><BR>
    92: * > **Parameters:**<BR>
    93: * >     module - timer module assignment, TIMER1                            <BR>
    94: * >     callback - function address of the timer ISR                        <BR>
    95: * >     prescaler - prescaler value(MCU chip dependent)                     <BR>
    96: * >     postcaler - postscaler value(MCU chip dependent)
    97: * > <BR><BR>
    98: * > **Returns:**<BR>
    99: * >     none
   100: * > <BR><BR>
   101: ***********************************************************************************/
   102: void setup16BitTimerFull(enum tmr16BitModules_et eTmrModule, void(*callback)(), uint8_t ui8Prescaler, uint8_t /*@unused@*/ui8Postscaler)
   103: {
   104:     /* Default */
   105:     if(TIMER1 == eTmrModule)
   106:     {
   107:         hal_initTMR1();
   108:         hal_setTMR1Prescaler(ui8Prescaler);
   109:         //hal_setTMR1Postscaler(ui8Postscaler);                           // not nedded on PIC TMR1
   110:         pt2TMR1ISR = callback;
   111:     }
   112:     else
   113:     {
   114:         /* do nothing */
   115:     }
   116: }
   117: 
   118: /*******************************************************************************//**
   119: * \brief Setup the 16Bit timer peripheral to count every 0.2uS @ 20Mhz Xtal
   120: *
   121: * > This function is called to initialize the 16Bit timer peripheral,
   122: * > prescaler and poscaler values were predefined to count every 0.2uS @ 20Mhz Xtal.
   123: * >
   124: * > The time to interrupt is set by the "set16BitTimer" function.
   125: *
   126: * > <BR>
   127: * > **Syntax:**<BR>
   128: * >      setup16BitTimer(module, &callback)
   129: * > <BR><BR>
   130: * > **Parameters:**<BR>
   131: * >     module - timer module assignment, TIMER1                <BR>
   132: * >     callback - function address of the timer ISR callback
   133: * > <BR><BR>
   134: * > **Returns:**<BR>
   135: * >     none
   136: * > <BR><BR>
   137: ***********************************************************************************/
   138: void setup16BitTimer(enum tmr16BitModules_et eTmrModule, void(*callback)())
   139: {
   140:     //setup16BitTimerFull(eTmrModule, callback, TMR1_PRESCALE, 0);          // disabled to save stack
   141:     if(TIMER1 == eTmrModule)
   142:     {
   143:         hal_initTMR1();
   144:         hal_setTMR1Prescaler(TMR1_PRESCALE);
   145:         pt2TMR1ISR = callback;
   146:     }
   147:     else
   148:     {
   149:         /* do nothing */
   150:     }
   151: }
   152: 
   153: /*******************************************************************************//**
   154: * \brief Set the 16bit count value
   155: *
   156: * > This function is called to set the timer count value. Once the count expires
   157: * > the interrupt service routine will be called.
   158: *
   159: * > <BR>
   160: * > **Syntax:**<BR>
   161: * >     set16BitTimer(module, value)
   162: * > <BR><BR>
   163: * > **Parameters:**<BR>
   164: * >     module - timer module assignment, TIMER1                                <BR>
   165: * >     value - (value x resolution) is the time it takes before timer interrupt occur
   166: * > <BR><BR>
   167: * > **Returns:**<BR>
   168: * >     none
   169: * > <BR><BR>
   170: ***********************************************************************************/
   171: void set16BitTimer(enum tmr16BitModules_et eTmrModule, uint16_t ui16Value)
   172: {
   173:     /* Default */
   174:     if(TIMER1 == eTmrModule)
   175:     {
   176:         hal_setTMR1Value(ui16Value);
   177:         /* enable TMR1 interrupt */
   178:         hal_clrTMR1IntFlag();                       // important at first run after initialization
   179:         hal_enableTMR1Int();
   180:         /* turn-on timer module */
   181:         hal_enableTMR1();
   182:     }
   183:     else
   184:     {
   185:         /* do nothing */
   186:     }
   187: }
   188: #endif
   189: 
   190: /* Private Functions */
   191: /* none */
   192: 
   193: /* end of corelib_16bit_timer.c */
   194: //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
