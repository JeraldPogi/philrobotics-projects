     1: /*****************************************************************************************//**
     2: * # PhilRobotics | Philippine Electronics and Robotics Enthusiasts Club #
     3: * http://philrobotics.com | http://philrobotics.com/forum | http://facebook.com/philrobotics
     4: * phirobotics.core@philrobotics.com
     5: *
     6: *---------------------------------------------------------------------------------------------
     7: * |Filename:      | "PhilRoboKit_CoreLib_GlobalDefs.c"          |
     8: * |:----          |:----                                        |
     9: * |Description:   | Global Variable Definitions                 |
    10: * |Revision:      | v00.01.01                                   |
    11: * |Author:        | Efren S. Cruzat II                          |
    12: * |               |                                             |
    13: * |Dependencies:  |                                             |
    14: *
    15: * > This program is free software: you can redistribute it and/or modify
    16: * > it under the terms of the GNU General Public License as published by
    17: * > the Free Software Foundation, either version 3 of the License, or
    18: * > (at your option) any later version.
    19: * > This program is distributed in the hope that it will be useful,
    20: * > but WITHOUT ANY WARRANTY; without even the implied warranty of
    21: * > MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    22: * > GNU General Public License for more details.
    23: * > <BR><BR>
    24: * > You should have received a copy of the GNU General Public License
    25: * > along with this program. If not, see http://www.gnu.org/licenses/
    26: * <BR>
    27: *---------------------------------------------------------------------------------------------
    28: * |FW Version   |Date       |Author             |Description                        |
    29: * |:----        |:----      |:----              |:----                              |
    30: * |v00.00.01    |20120713   |ESCII              |Library Initial Release            |
    31: * |v00.00.02    |20130508   |ESCII              |Fixed Mutex Locking on inc timer counters|
    32: * |v00.01.00    |20130514   |ESCII              |Code Formated                      |
    33: * |v00.01.01    |20130515   |ESCII              |Fixed SPLINT Warning               |
    34: *********************************************************************************************/
    35: #define __SHOW_MODULE_HEADER__ /*!< \brief This section includes the Module Header on the documentation */
    36: #undef  __SHOW_MODULE_HEADER__
    37: 
    38: #include "PhilRoboKit_CoreLib_GlobalDefs.h"
    39: 
    40: /* Local Constants */
    41: /* none */
    42: 
    43: /* Global Variables */
    44: static volatile bool_t      gblInitialized      = FALSE;
    45: static volatile bool_t      gblISRLocked        = FALSE;
    46: 
    47: /* Timers */
    48: static volatile uint16_t    gui16TimerUsMSB     = 0;            // only the timer isr must write on these variables
    49: static volatile uint16_t    gui16TimerMs        = 0;            // only the timer isr must write on these variables
    50: static volatile uint16_t    gui16TimerSec       = 0;            // only the timer isr must write on these variables
    51: 
    52: /* Local Variables */
    53: /* none */
    54: 
    55: /* Function Prototypes */
    56: /* none */
    57: 
    58: /* Public Functions */
    59: /* A flag to indicate low level initialization has commenced and the global interrupts are alread enabled */
    60: void set_gblInitialized_FlagValue(void)
    61: {
    62:     gblInitialized = TRUE;
    63: }
    64: 
    65: bool_t get_gblInitialized_FlagValue(void)
    66: {
    67:     bool_t blTemp;
    68:     blTemp = gblInitialized;
    69:     return blTemp;
    70: }
    71: 
    72: void set_gblISRLocked_FlagValue(void)
    73: {
    74:     gblISRLocked = TRUE;
    75: }
    76: 
    77: void clr_gblISRLocked_FlagValue(void)
    78: {
    79:     gblISRLocked = FALSE;
    80: }
    81: 
    82: bool_t get_gblISRLocked_FlagValue(void)
    83: {
    84:     bool_t blTemp;
    85:     blTemp = gblISRLocked;
    86:     return blTemp;
    87: }
    88: 
    89: /* Microseconds */
    90: void inc_gui16TimerUsMSB_Value(uint16_t ui16Value)
    91: {
    92:     disableGlobalInt();                             // Atomic Operation
    93:     gui16TimerUsMSB += ui16Value;
    94: 
    95:     if(FALSE == gblISRLocked)                       // Let ISR reenable interrupts
    96:     {
    97:         enableGlobalInt();
    98:     }
    99: }
   100: 
   101: uint16_t get_gui16TimerUsMSB_Value(void)
   102: {
   103:     uint16_t ui16Temp;
   104:     //while(TRUE == gblISRLocked) {}                // acquire mutex
   105:     //disableGlobalInt();                           // Atomic Operation
   106:     ui16Temp = (gui16TimerUsMSB&0xFF00);
   107:     //enableGlobalInt();                            // esc.comment enabled on corelib_basetimer.c
   108:     return ui16Temp;
   109: }
   110: 
   111: /* Milliseconds */
   112: void inc_gui16TimerMs_Value(void)
   113: {
   114:     disableGlobalInt();                             // Atomic Operation
   115:     gui16TimerMs++;
   116: 
   117:     if(FALSE == gblISRLocked)                       // Let ISR reenable interrupts
   118:     {
   119:         enableGlobalInt();
   120:     }
   121: }
   122: 
   123: uint16_t get_gui16TimerMs_Value(void)
   124: {
   125:     uint16_t ui16Temp;
   126:     //while(TRUE == gblISRLocked) {}                // acquire mutex
   127:     //disableGlobalInt();                           // Atomic Operation
   128:     ui16Temp =  gui16TimerMs;
   129:     //enableGlobalInt();                            // esc.comment enabled on corelib_basetimer.c
   130:     return ui16Temp;
   131: }
   132: 
   133: /* Seconds */
   134: void inc_gui16TimerSec_Value(void)
   135: {
   136:     disableGlobalInt();                             // Atomic Operation
   137:     gui16TimerSec++;
   138: 
   139:     if(FALSE == gblISRLocked)                       // Let ISR reenable interrupts
   140:     {
   141:         enableGlobalInt();
   142:     }
   143: }
   144: 
   145: uint16_t get_gui16TimerSec_Value(void)
   146: {
   147:     uint16_t ui16Temp;
   148:     //while(TRUE == gblISRLocked) {}                // acquire mutex
   149:     //disableGlobalInt();                           // Atomic Operation
   150:     ui16Temp = gui16TimerSec;
   151:     //enableGlobalInt();                            // esc.comment enabled on corelib_basetimer.c
   152:     return ui16Temp;
   153: }
   154: 
   155: /* Private Functions */
   156: /* none */
   157: 
   158: /* end of PhilRoboKit_CoreLib_GlobalDefs.c */
   159: //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
