     1: /*****************************************************************************************//**
     2: * # PhilRobotics | Philippine Electronics and Robotics Enthusiasts Club #
     3: * http://philrobotics.com | http://philrobotics.com/forum | http://facebook.com/philrobotics
     4: * phirobotics.core@philrobotics.com
     5: *
     6: *---------------------------------------------------------------------------------------------
     7: * |Filename:      | "corelib_user_interrupt.c"                  |
     8: * |:----          |:----                                        |
     9: * |Description:   | This is a library for using the external pin interrupt |
    10: * |Revision:      | v00.02.00                                   |
    11: * |Author:        | Efren S. Cruzat II                          |
    12: * |               |                                             |
    13: * |Dependencies:  |                                             |
    14: *
    15: * > This program is free software: you can redistribute it and/or modify
    16: * > it under the terms of the GNU General Public License as published by
    17: * > the Free Software Foundation, either version 3 of the License, or
    18: * > (at your option) any later version.
    19: * > This program is distributed in the hope that it will be useful,
    20: * > but WITHOUT ANY WARRANTY; without even the implied warranty of
    21: * > MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    22: * > GNU General Public License for more details.
    23: * > <BR><BR>
    24: * > You should have received a copy of the GNU General Public License
    25: * > along with this program. If not, see http://www.gnu.org/licenses/
    26: * <BR>
    27: *---------------------------------------------------------------------------------------------
    28: * |FW Version   |Date       |Author             |Description                        |
    29: * |:----        |:----      |:----              |:----                              |
    30: * |v00.00.01    |20120608   |ESCII              |Library Initial Release            |
    31: * |v00.00.02    |20120624   |ESCII              |Reorganized for Clarity
    32: *                                                - Have more strict policy on scope of
    33: *                                                  variables and functions          |
    34: * |v00.00.03    |20120711   |ESCII              |Code Cleanup
    35: *                                                - Removed void type on function pointers
    36: *                                                - Enumerated interrupt modes and sources   |
    37: * |v00.01.00    |20130207   |ESCII              |Modified For Layered Architecture  |
    38: * |v00.02.00    |20130514   |ESCII              |Code Formatted                     |
    39: *********************************************************************************************/
    40: #define __SHOW_MODULE_HEADER__ /*!< \brief This section includes the Module Header on the documentation */
    41: #undef  __SHOW_MODULE_HEADER__
    42: 
    43: #include "corelib_user_interrupt.h"
    44: 
    45: /* Local Constants */
    46: #define K_FALLING_EDGE          0
    47: #define K_RISING_EDGE           1
    48: 
    49: /* Local Variables */
    50: volatile uint8_t PORTB_BUFFER=0,PORTB_DIRECTION=0;
    51: 
    52: /* Private Function Prototypes */
    53: /* none */
    54: 
    55: /* Public Functions */
    56: /*******************************************************************************//**
    57: * \brief External pin interrupt service routine
    58: *
    59: * >  This is an interrupt handler called when there is a change on interrupt pin state
    60: *
    61: * > <BR>
    62: * > **Syntax:**<BR>
    63: * >      userIntISR(), ISR
    64: * > <BR><BR>
    65: * > **Parameters:**<BR>
    66: * >     none
    67: * > <BR><BR>
    68: * > **Returns:**<BR>
    69: * >     none
    70: * > <BR><BR>
    71: ***********************************************************************************/
    72: void userIntISR(void)
    73: {
    74:     /*  Check External Interrupt */
    75:     if(hal_getEXTIntEnableStatus() && hal_getEXTIntFlag())
    76:     {
    77:         hal_disableEXTInt();                        // Temporary Disable Interrupt
    78: #if(EXTINTENABLED == TRUE)
    79:         extIntISR();
    80: #endif
    81:         hal_clrEXTIntFlag();
    82:         hal_enableEXTInt();                         // Reenable Interrupt
    83:     }
    84: 
    85: #if(EXTINT1ENABLED == TRUE)
    86: 
    87:     /*  Check External Interrupt 1 */
    88:     if(hal_getEXTInt1EnableStatus() && hal_getEXTInt1Flag())
    89:     {
    90:         hal_disableEXTInt1();                       // Temporary Disable Interrupt
    91:         extInt1ISR();
    92:         hal_clrEXTInt1Flag();
    93:         hal_enableEXTInt1();                        // Reenable Interrupt
    94:     }
    95: 
    96: #endif
    97: #if(EXTINT2ENABLED == TRUE)
    98: 
    99:     /*  Check External Interrupt 2 */
   100:     if(hal_getEXTInt2EnableStatus() && hal_getEXTInt2Flag())
   101:     {
   102:         hal_disableEXTInt2();                       // Temporary Disable Interrupt
   103:         extInt2ISR();
   104:         hal_clrEXTInt2Flag();
   105:         hal_enableEXTInt2();                        // Reenable Interrupt
   106:     }
   107: 
   108: #endif
   109: 
   110:     /* Check Interrupt on PortB Change */
   111:     if(hal_getRBIntEnableStatus() && hal_getRBIntFlag())
   112:     {
   113:         hal_disableRBInt();                         // Temporary Disable Interrupt
   114: #if(RBINTENABLED == TRUE)
   115:         rbIntISR();
   116: #endif
   117:         hal_clrRBIntFlag();
   118:         hal_enableRBInt();                          // Reenable Interrupt
   119:     }
   120: }
   121: 
   122: /*******************************************************************************//**
   123: * \brief Setup the external pin interrupt
   124: *
   125: * > This function is called to initialize the external pin interrupt peripheral
   126: * > to interrupt on either, rising or falling edge, or change on pin states
   127: *
   128: * > <BR>
   129: * > **Syntax:**<BR>
   130: * >      setupUserInt(source, &callback, mode)
   131: * > <BR><BR>
   132: * > **Parameters:**<BR>
   133: * >     source - external pin interrupt source, INT0, INT1, INT2, INT3, INT4    <BR>
   134: * >     callback - function address of the external pin ISR callback            <BR>
   135: * >     mode - defines how the interrupt should be triggered, CHANGE, RISING, FALLING
   136: * > <BR><BR>
   137: * > **Returns:**<BR>
   138: * >     none
   139: * > <BR><BR>
   140: ***********************************************************************************/
   141: void setupUserInt(enum InterruptSources_et eIntSource, void(*callback)(), /*enum InterruptModes_et*/uint8_t eIntMode)
   142: {
   143:     /* External Interrupt */
   144:     if(INTR0 == eIntSource)
   145:     {
   146: #if(EXTINTENABLED == TRUE)
   147:         /* Set Int Pin to Input */
   148:         mc_makeInput(D8);
   149: 
   150:         if(RISING == eIntMode)
   151:         {
   152:             K_INT0_EDGE_BIT = K_RISING_EDGE;        // Start detecting at rising edge
   153:         }
   154:         else if(FALLING == eIntMode)
   155:         {
   156:             K_INT0_EDGE_BIT = K_FALLING_EDGE;       // Start detecting at falling edge
   157:         }
   158:         else if(CHANGE == eIntMode)
   159:         {
   160:             /* Set the Inverse of Current Pin State*/
   161:             if(HIGH == mc_getPinState(D8))
   162:             {
   163:                 K_INT0_EDGE_BIT  = K_FALLING_EDGE;
   164:             }
   165:             else
   166:             {
   167:                 K_INT0_EDGE_BIT  = K_RISING_EDGE;
   168:             }
   169:         }
   170:         else
   171:         {
   172:             /* Do Nothing */
   173:         }
   174: 
   175:         eMod0_Mode = eIntMode;
   176:         pt2INT0 = callback;                         // assign INT0 Function Pointer
   177:         hal_clrEXTIntFlag();
   178:         hal_enableEXTInt();
   179: #endif
   180:     }
   181:     else if(INTR1 == eIntSource)
   182:     {
   183: #if(EXTINT1ENABLED == TRUE)
   184:         /* Set Int Pin to Input */
   185:         mc_makeInput(D9);
   186: 
   187:         if(RISING == eIntMode)
   188:         {
   189:             K_INT1_EDGE_BIT = K_RISING_EDGE;        // Start detecting at rising edge
   190:         }
   191:         else if(FALLING == eIntMode)
   192:         {
   193:             K_INT1_EDGE_BIT = K_FALLING_EDGE;       // Start detecting at falling edge
   194:         }
   195:         else if(CHANGE == eIntMode)
   196:         {
   197:             /* Set the Inverse of Current Pin State*/
   198:             if(HIGH == mc_getPinState(D9))
   199:             {
   200:                 K_INT1_EDGE_BIT  = K_FALLING_EDGE;
   201:             }
   202:             else
   203:             {
   204:                 K_INT1_EDGE_BIT  = K_RISING_EDGE;
   205:             }
   206:         }
   207:         else
   208:         {
   209:             /* Do Nothing */
   210:         }
   211: 
   212:         eMod1_Mode = eIntMode;
   213:         pt2INT1 = callback;                         // assign INT1 Function Pointer
   214:         hal_clrEXTInt1Flag();
   215:         hal_enableEXTInt1();
   216: #endif
   217:     }
   218:     else if(INTR2 == eIntSource)
   219:     {
   220: #if(EXTINT2ENABLED == TRUE)
   221:         /* Set Int Pin to Input */
   222:         mc_makeInput(D10);
   223: 
   224:         if(RISING == eIntMode)
   225:         {
   226:             K_INT2_EDGE_BIT = K_RISING_EDGE;        // Start detecting at rising edge
   227:         }
   228:         else if(FALLING == eIntMode)
   229:         {
   230:             K_INT2_EDGE_BIT = K_FALLING_EDGE;       // Start detecting at falling edge
   231:         }
   232:         else if(CHANGE == eIntMode)
   233:         {
   234:             /* Set the Inverse of Current Pin State*/
   235:             if(HIGH == mc_getPinState(D10))
   236:             {
   237:                 K_INT2_EDGE_BIT  = K_FALLING_EDGE;
   238:             }
   239:             else
   240:             {
   241:                 K_INT2_EDGE_BIT  = K_RISING_EDGE;
   242:             }
   243:         }
   244:         else
   245:         {
   246:             /* Do Nothing */
   247:         }
   248: 
   249:         eMod2_Mode = eIntMode;
   250:         pt2INT2 = callback;                         // assign INT1 Function Pointer
   251:         hal_clrEXTInt2Flag();
   252:         hal_enableEXTInt2();
   253: #endif
   254:     }
   255:     /* Interrupt on PortB Change */
   256:     else
   257:     {
   258: #if(RBINTENABLED == TRUE)
   259:         PORTB_DIRECTION = 0x00;
   260: 
   261:         /* RB4 Interrupt on Change */
   262:         if(INTR4 == eIntSource)
   263:         {
   264:             /* Set Int Pin to Input */
   265:             mc_makeInput(D12);
   266:             PORTB_DIRECTION |= k8_D12_MASK;
   267:             eMod4_Mode = eIntMode;
   268:             pt2INT4 = callback;                     // assign INT1 Function Pointer
   269:         }
   270:         /* RB5 Interrupt on Change */
   271:         else if(INTR5 == eIntSource)
   272:         {
   273:             /* Set Int Pin to Input */
   274:             mc_makeInput(D13);
   275:             PORTB_DIRECTION |= k8_D13_MASK;
   276:             eMod5_Mode = eIntMode;
   277:             pt2INT5 = callback;                     // assign INT2 Function Pointer
   278:         }
   279:         /* RB6 Interrupt on Change */
   280:         else if(INTR6 == eIntSource)
   281:         {
   282:             /* Set Int Pin to Input */
   283:             PORTB_DIR |= RB6_MASK;
   284:             PORTB_DIRECTION |= RB6_MASK;
   285:             eMod6_Mode = eIntMode;
   286:             pt2INT6 = callback;                     // assign INT3 Function Pointer
   287:         }
   288:         /* RB7 Interrupt on Change */
   289:         else if(INTR7 == eIntSource)
   290:         {
   291:             /* Set Int Pin to Input */
   292:             PORTB_DIR |= RB7_MASK;
   293:             PORTB_DIRECTION |= RB7_MASK;
   294:             eMod7_Mode = eIntMode;
   295:             pt2INT7 = callback;                     // assign INT4 Function Pointer
   296:         }
   297:         else
   298:         {
   299:             /* Do Nothing */
   300:         }
   301: 
   302:         /* PORTB States Reference */
   303:         PORTB_BUFFER = K_INT_PORTB_REG & PORTB_DIRECTION;    // Ignore Outputs
   304:         hal_clrRBIntFlag();
   305:         hal_enableRBInt();
   306: #endif
   307:     }
   308: }
   309: 
   310: /* Private Functions */
   311: /* none */
   312: 
   313: /* end of corelib_user_interrupt.c */
   314: //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   315: 
   316: 
   317: 
   318: 
   319: 
