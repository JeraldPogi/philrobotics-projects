     1: /*****************************************************************************************//**
     2: * # PhilRobotics | Philippine Electronics and Robotics Enthusiasts Club #
     3: * http://philrobotics.com | http://philrobotics.com/forum | http://facebook.com/philrobotics
     4: * phirobotics.core@philrobotics.com
     5: *
     6: *---------------------------------------------------------------------------------------------
     7: * |Filename:      | "corelib_basetimer.c"                       |
     8: * |:----          |:----                                        |
     9: * |Description:   | Anito Base Timer Application                |
    10: * |Revision:      | v01.01.01                                   |
    11: * |Author:        | Giancarlo Acelajado                         |
    12: * |               |                                             |
    13: * |Dependencies:  |                                             |
    14: *
    15: * > This program is free software: you can redistribute it and/or modify
    16: * > it under the terms of the GNU General Public License as published by
    17: * > the Free Software Foundation, either version 3 of the License, or
    18: * > (at your option) any later version.
    19: * > This program is distributed in the hope that it will be useful,
    20: * > but WITHOUT ANY WARRANTY; without even the implied warranty of
    21: * > MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    22: * > GNU General Public License for more details.
    23: * > <BR><BR>
    24: * > You should have received a copy of the GNU General Public License
    25: * > along with this program. If not, see http://www.gnu.org/licenses/
    26: * <BR>
    27: *---------------------------------------------------------------------------------------------
    28: * |FW Version   |Date       |Author             |Description                                |
    29: * |:----        |:----      |:----              |:----                                      |
    30: * |v00.00.01    |201211xx   |Giancarlo A.       |Library Initial Release                    |
    31: * |v01.00.01    |20130321   |ESCII              |Modified uS time computation to use TMR0   |
    32: * |v01.01.00    |20130514   |ESCII              |Code Formatted                             |
    33: * |v01.01.01    |20130517   |ESCII              |Tracepoints added for unit testing         |
    34: *********************************************************************************************/
    35: #define __SHOW_MODULE_HEADER__ /*!< \brief This section includes the Module Header on the documentation */
    36: #undef  __SHOW_MODULE_HEADER__
    37: 
    38: #include "corelib_basetimer.h"
    39: 
    40: /* Local Constants */
    41: /* none */
    42: 
    43: /* Local Variables */
    44: /* none */
    45: 
    46: /* Private Function Prototypes */
    47: /* none */
    48: 
    49: 
    50: /* Public Functions */
    51: /*******************************************************************************//**
    52: * \brief Microsecond Time Stamp
    53: *
    54: * > This function returns the value of a freerunning counter which increments every
    55: * > 1uS. The stamp is used to measure the elapsed time from the time a stamp is
    56: * > acquired until the getElapsedUs() function is called.
    57: *
    58: * > <BR>
    59: * > **Syntax:**<BR>
    60: * >      stamp = getUs()
    61: * > <BR><BR>
    62: * > **Parameters:**<BR>
    63: * >     none
    64: * > <BR><BR>
    65: * > **Returns:**<BR>
    66: * >     uint16_t stamp - the current value of the freerunning uS counter
    67: * > <BR><BR>
    68: ***********************************************************************************/
    69: uint16_t getUs(void)
    70: {
    71:     uint16_t ui16TempBuff;
    72: 
    73:     while(TRUE == get_gblISRLocked_FlagValue()) {}  // acquire mutex
    74: 
    75:     disableGlobalInt();                             // Atomic Operation
    76:     ui16TempBuff = getBaseTimerValue();
    77:     enableGlobalInt();
    78:     return ui16TempBuff;
    79: }
    80: 
    81: /*******************************************************************************//**
    82: * \brief  Microsecond Elapsed Time Measurement
    83: *
    84: * > This function returns the difference between the current value of the freerunning
    85: * > uS counter and the previous timestamp.
    86: *
    87: * > <BR>
    88: * > **Syntax:**<BR>
    89: * >      elapsed = getElapsedUs(stamp)
    90: * > <BR><BR>
    91: * > **Parameters:**<BR>
    92: * >     stamp - uS time reference
    93: * > <BR><BR>
    94: * > **Returns:**<BR>
    95: * >     uint16_t elapsed - measured uS time difference
    96: * > <BR><BR>
    97: ***********************************************************************************/
    98: uint16_t getElapsedUs(uint16_t ui16TimeUs)
    99: {
   100:     uint16_t ui16TempBuff;
   101: 
   102:     while(TRUE == get_gblISRLocked_FlagValue()) {}  // acquire mutex
   103: 
   104:     disableGlobalInt();                             // Atomic Operation
   105:     ui16TempBuff = getBaseTimerValue() - ui16TimeUs;
   106:     enableGlobalInt();
   107:     return ui16TempBuff;
   108: }
   109: 
   110: /*******************************************************************************//**
   111: * \brief Millisecond Time Stamp
   112: *
   113: * > This function returns the value of a freerunning counter which increments every
   114: * > 1mS. The stamp is used to measure the elapsed time from the time a stamp is
   115: * > acquired until the getElapsedMs() function is called.
   116: *
   117: * > <BR>
   118: * > **Syntax:**<BR>
   119: * >      stamp = getMs()
   120: * > <BR><BR>
   121: * > **Parameters:**<BR>
   122: * >     none
   123: * > <BR><BR>
   124: * > **Returns:**<BR>
   125: * >     uint16_t stamp - the current value of the freerunning mS counter
   126: * > <BR><BR>
   127: ***********************************************************************************/
   128: uint16_t getMs(void)
   129: {
   130:     uint16_t ui16TempBuff;
   131: 
   132:     while(TRUE == get_gblISRLocked_FlagValue()) {}  // acquire mutex
   133: 
   134:     disableGlobalInt();                             // Atomic Operation
   135:     ui16TempBuff = get_gui16TimerMs_Value();
   136:     enableGlobalInt();
   137:     return ui16TempBuff;
   138: }
   139: 
   140: /*******************************************************************************//**
   141: * \brief  Millisecond Elapsed Time Measurement
   142: *
   143: * > This function returns the difference between the current value of the freerunning
   144: * > mS counter and the previous timestamp.
   145: *
   146: * > <BR>
   147: * > **Syntax:**<BR>
   148: * >      elapsed = getElapsedMs(stamp)
   149: * > <BR><BR>
   150: * > **Parameters:**<BR>
   151: * >     stamp - mS time reference
   152: * > <BR><BR>
   153: * > **Returns:**<BR>
   154: * >     uint16_t elapsed - measured mS time difference
   155: * > <BR><BR>
   156: ***********************************************************************************/
   157: uint16_t getElapsedMs(uint16_t ui16TimeMs)
   158: {
   159:     uint16_t ui16TempBuff;
   160:         uint16_t ui16ReturnBuff;
   161: 
   162:     while(TRUE == get_gblISRLocked_FlagValue()) {}  // acquire mutex
   163: 
   164:     disableGlobalInt();                             // Atomic Operation
   165:     ui16TempBuff = get_gui16TimerMs_Value() - ui16TimeMs;
   166:     enableGlobalInt();
   167:     return ui16TempBuff;
   168: }
   169: 
   170: #ifdef __TIMER_SEC__
   171: /*******************************************************************************//**
   172: * \brief Seconds Time Stamp
   173: *
   174: * > This function returns the value of a freerunning counter which increments every
   175: * > 1Sec. The stamp is used to measure the elapsed time from the time a stamp is
   176: * > acquired until the getElapsedSec() function is called.
   177: *
   178: * > <BR>
   179: * > **Syntax:**<BR>
   180: * >      stamp = getSec()
   181: * > <BR><BR>
   182: * > **Parameters:**<BR>
   183: * >     none
   184: * > <BR><BR>
   185: * > **Returns:**<BR>
   186: * >     uint16_t stamp - the current value of the freerunning Sec counter
   187: * > <BR><BR>
   188: ***********************************************************************************/
   189: uint16_t getSec(void)
   190: {
   191:     uint16_t ui16TempBuff;
   192: 
   193:     while(TRUE == get_gblISRLocked_FlagValue()) {}  // acquire mutex
   194: 
   195:     disableGlobalInt();                             // Atomic Operation
   196:     ui16TempBuff = get_gui16TimerSec_Value();
   197:     return ui16TempBuff;
   198: }
   199: 
   200: /*******************************************************************************//**
   201: * \brief  Seconds Elapsed Time Measurement
   202: *
   203: * > This function returns the difference between the current value of the freerunning
   204: * > Sec counter and the previous timestamp.
   205: *
   206: * > <BR>
   207: * > **Syntax:**<BR>
   208: * >      elapsed = getElapsedSec(stamp)
   209: * > <BR><BR>
   210: * > **Parameters:**<BR>
   211: * >     stamp - Sec time reference
   212: * > <BR><BR>
   213: * > **Returns:**<BR>
   214: * >     uint16_t elapsed - measured Sec time difference
   215: * > <BR><BR>
   216: ***********************************************************************************/
   217: uint16_t getElapsedSec(uint16_t ui16TimeSec)
   218: {
   219:     uint16_t ui16TempBuff;
   220: 
   221:     while(TRUE == get_gblISRLocked_FlagValue()) {}  // acquire mutex
   222: 
   223:     disableGlobalInt();                             // Atomic Operation
   224:     ui16TempBuff = get_gui16TimerSec_Value() - ui16TimeSec;
   225:     enableGlobalInt();
   226:     return ui16TempBuff;
   227: }
   228: #endif
   229: 
   230: /* Private Functions */
   231: /* none */
   232: 
   233: /* end of corelib_basetimer.c */
   234: //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
