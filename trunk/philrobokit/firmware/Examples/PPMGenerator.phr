#define NUM_OF_CHANNELS		6

#define TMR2_MAX_COUNT		255

/* Packet Description */
#define PULSE_PERIOD		15		// 100uS
#define CYCLE_PERIOD		2500	// 25mS

/* Channel Description */
#define MAX_POSITION		250		// 2.5mS
#define DEF_POSITION		150		// 1.5mS
#define MIN_POSITION		50		// 0.5mS

/* ADC to PPM */
#define ADC2PPM_SLOPE		((250-50)*256/(1023))
#define ADC2PPM_OFFSET		DEF_POSITION

unsigned char	ChannelPeriods[NUM_OF_CHANNELS], PPM_State, tempvar;
signed char 	channel_ctr;
unsigned long	FrameBlankTime,SumOfPeriods;
bit 			SendPulse, BlankTimeSet;

enum PPMGenStates
{
	SEND_PULSE
	,SEND_CHANNEL_PERIOD
	,WAIT_END_OF_CYCLE
};
	
void PPMGenerator()
{
	switch(PPM_State)
	{
		case SEND_PULSE:
		{
			setPinLow(D13);
			setTimerValue(TIMER2,PULSE_PERIOD);
			
			if(channel_ctr < (NUM_OF_CHANNELS-1))
			{
				PPM_State = SEND_CHANNEL_PERIOD;
				channel_ctr++;
			}
			else
			{
				PPM_State = WAIT_END_OF_CYCLE;
				channel_ctr=-1;
				BlankTimeSet = 0;
			}			
			break;
		}
		case SEND_CHANNEL_PERIOD:
		{
			setPinHigh(D13);			
			setTimerValue(TIMER2,(ChannelPeriods[channel_ctr] - PULSE_PERIOD));
			SumOfPeriods += ChannelPeriods[channel_ctr];
			PPM_State = SEND_PULSE;
			break;
		}
		case WAIT_END_OF_CYCLE:
		{
			setPinHigh(D13);
			
			if(0 == BlankTimeSet)
			{
				FrameBlankTime = CYCLE_PERIOD - SumOfPeriods;
				BlankTimeSet = 1;
			}

			if(FrameBlankTime > TMR2_MAX_COUNT)
			{
				setTimerValue(TIMER2,TMR2_MAX_COUNT);
				FrameBlankTime -= TMR2_MAX_COUNT;
				PPM_State = WAIT_END_OF_CYCLE;
			}
			else
			{
				setTimerValue(TIMER2,(unsigned char)FrameBlankTime);
				PPM_State = SEND_PULSE;
				SumOfPeriods = 0;
			}
			break;
		}
		default:
		{
			break;
		}
	}
}

unsigned int convertADC2Period(unsigned int ADCValue)
{
	unsigned long PPMValue;
	
	PPMValue = ((unsigned long)ADCValue * ADC2PPM_SLOPE)/256 + ADC2PPM_OFFSET;
	
	return (unsigned int)PPMValue;
}

void init()
{
	setup8BitTimerDef(TIMER2,PPMGenerator);
	
	for(tempvar = 0; tempvar<NUM_OF_CHANNELS; tempvar++)
	{
		ChannelPeriods[tempvar] = MIN_POSITION;
	}
	
	/* Start with Channel 1 */
	setPinOutput(D13);
	setPinLow(D13);
	setTimerValue(TMR2,PULSE_PERIOD);	
	PPM_State = SEND_CHANNEL_PERIOD;
	channel_ctr = 0;
	
}

void program()
{
	#if 0 
	/* Convert ADC to Channel Period */
	for(tempvar = 0; tempvar<NUM_OF_CHANNELS; tempvar++)
	{
		ChannelPeriods[tempvar] = convertADC2Period(1);
	}
	#endif
		unsigned int i;
	
	/* increment angle */
	for(i=0;i<=1023;i++)
	{
		for(tempvar = 0; tempvar<NUM_OF_CHANNELS; tempvar++)
		{
			ChannelPeriods[tempvar] = convertADC2Period(i);
		}
		//delayMS(5);
		__delay_ms(10);
	}
	
	//delayMS(200);
	//delayMS(200);
	__delay_ms(200);
	__delay_ms(200);	
	
	/* decrement angle */
	for(i=1023;i>0;i--)
	{
		for(tempvar = 0; tempvar<NUM_OF_CHANNELS; tempvar++)
		{
			ChannelPeriods[tempvar] = convertADC2Period(i);
		}
		//delayMS(5);
		__delay_ms(10);
	}
	
	//delayMS(200);
	//delayMS(200);
	__delay_ms(200);
	__delay_ms(200);
}
