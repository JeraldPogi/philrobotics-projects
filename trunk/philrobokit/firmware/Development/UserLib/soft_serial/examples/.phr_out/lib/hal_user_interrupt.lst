     1: /*****************************************************************************************//**
     2: * # PhilRobotics | Philippine Electronics and Robotics Enthusiasts Club #
     3: * http://philrobotics.com | http://philrobotics.com/forum | http://facebook.com/philrobotics
     4: * phirobotics.core@philrobotics.com
     5: *
     6: *---------------------------------------------------------------------------------------------
     7: * |Filename:      | "hal_user_interrupt.c"                      |
     8: * |:----          |:----                                        |
     9: * |Description:   | This is a driver for using the external pin interrupt |
    10: * |Revision:      | v00.01.00                                   |
    11: * |Author:        | Efren S. Cruzat II                          |
    12: * |               |                                             |
    13: * |Dependencies:  |                                             |
    14: *
    15: * > This program is free software: you can redistribute it and/or modify
    16: * > it under the terms of the GNU General Public License as published by
    17: * > the Free Software Foundation, either version 3 of the License, or
    18: * > (at your option) any later version.
    19: * > This program is distributed in the hope that it will be useful,
    20: * > but WITHOUT ANY WARRANTY; without even the implied warranty of
    21: * > MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    22: * > GNU General Public License for more details.
    23: * > <BR><BR>
    24: * > You should have received a copy of the GNU General Public License
    25: * > along with this program. If not, see http://www.gnu.org/licenses/
    26: * <BR>
    27: *---------------------------------------------------------------------------------------------
    28: * |FW Version   |Date       |Author             |Description                        |
    29: * |:----        |:----      |:----              |:----                              |
    30: * |v00.00.01    |20130207   |ESCII              |Library Initial Release            |
    31: * |v00.00.02    |20130402   |ESCII              |Changed PORTCHANGE_BUFFER type from int to uint8_t  and made static|
    32: * |v00.01.00    |20130514   |ESCII              |Code Formatted                     |
    33: *********************************************************************************************/
    34: #define __SHOW_MODULE_HEADER__ /*!< \brief This section includes the Module Header on the documentation */
    35: #undef  __SHOW_MODULE_HEADER__
    36: 
    37: #include "hal_user_interrupt.h"
    38: 
    39: /* Local Constants */
    40: /* none */
    41: 
    42: /* Local Variables */
    43: extern volatile uint8_t PORTB_BUFFER,PORTB_DIRECTION;
    44: 
    45: /* Private Function Prototypes */
    46: /* none */
    47: 
    48: /* Public Functions */
    49: /*******************************************************************************//**
    50: * \brief Initialize external pin interrupt function pointer with null function
    51: *
    52: * > This function basically does nothing and is used to initialize external pin
    53: * > interrupt function pointer.
    54: *
    55: * > <BR>
    56: * > **Syntax:**<BR>
    57: * >     nullINTFunction()
    58: * > <BR><BR>
    59: * > **Parameters:**<BR>
    60: * >     none
    61: * > <BR><BR>
    62: * > **Returns:**<BR>
    63: * >     none
    64: * > <BR><BR>
    65: ***********************************************************************************/
    66: void nullIntFunction()
    67: {
    68:     ;/* NULL */
    69: }
    70: 
    71: /*******************************************************************************//**
    72: * \brief INT0 interrupt service routine
    73: *
    74: * >  This is an interrupt handler called when there is a change on INT0 pin state
    75: *
    76: * > <BR>
    77: * > **Syntax:**<BR>
    78: * >      extIntISR(), ISR
    79: * > <BR><BR>
    80: * > **Parameters:**<BR>
    81: * >     none
    82: * > <BR><BR>
    83: * > **Returns:**<BR>
    84: * >     none
    85: * > <BR><BR>
    86: ***********************************************************************************/
    87: #if(EXTINTENABLED == TRUE)
    88: void extIntISR()
    89: {
    90:     /* INT0 */
    91:     if(CHANGE == eMod0_Mode)
    92:     {
    93:         K_INT0_EDGE_BIT = ~K_INT0_EDGE_BIT; // toggle Int0 edge to trigger on next interrupt edge
    94:     }
    95: 
    96:     /* Call User Function */
    97:     pt2INT0();
    98: }
    99: #endif
   100: 
   101: #if(EXTINT1ENABLED == TRUE)
   102: /*******************************************************************************//**
   103: * \brief INT1 interrupt service routine
   104: *
   105: * >  This is an interrupt handler called when there is a change on INT1 pin state
   106: *
   107: * > <BR>
   108: * > **Syntax:**<BR>
   109: * >      extInt1ISR(), ISR
   110: * > <BR><BR>
   111: * > **Parameters:**<BR>
   112: * >     none
   113: * > <BR><BR>
   114: * > **Returns:**<BR>
   115: * >     none
   116: * > <BR><BR>
   117: ***********************************************************************************/
   118: void extInt1ISR()
   119: {
   120:     /* INT1 */
   121:     if(CHANGE == eMod1_Mode)
   122:     {
   123:         K_INT1_EDGE_BIT = ~K_INT1_EDGE_BIT; // toggle Int0 edge to trigger on next interrupt edge
   124:     }
   125: 
   126:     /* Call User Function */
   127:     pt2INT1();
   128: }
   129: #endif
   130: 
   131: #if(EXTINT2ENABLED == TRUE)
   132: /*******************************************************************************//**
   133: * \brief INT2 interrupt service routine
   134: *
   135: * >  This is an interrupt handler called when there is a change on INT2 pin state
   136: *
   137: * > <BR>
   138: * > **Syntax:**<BR>
   139: * >      extInt2ISR(), ISR
   140: * > <BR><BR>
   141: * > **Parameters:**<BR>
   142: * >     none
   143: * > <BR><BR>
   144: * > **Returns:**<BR>
   145: * >     none
   146: * > <BR><BR>
   147: ***********************************************************************************/
   148: void extInt2ISR()
   149: {
   150:     /* INT2 */
   151:     if(CHANGE == eMod2_Mode)
   152:     {
   153:         K_INT2_EDGE_BIT = ~K_INT2_EDGE_BIT; // toggle Int0 edge to trigger on next interrupt edge
   154:     }
   155: 
   156:     /* Call User Function */
   157:     pt2INT2();
   158: }
   159: #endif
   160: 
   161: /*******************************************************************************//**
   162: * \brief PORTB interrupt service routine
   163: *
   164: * >  This is an interrupt handler called when there is a change on PORTB interrupt
   165: * >  pin state
   166: *
   167: * > <BR>
   168: * > **Syntax:**<BR>
   169: * >      rbIntISR(), ISR
   170: * > <BR><BR>
   171: * > **Parameters:**<BR>
   172: * >     none
   173: * > <BR><BR>
   174: * > **Returns:**<BR>
   175: * >     none
   176: * > <BR><BR>
   177: ***********************************************************************************/
   178: #if(RBINTENABLED == TRUE)
   179: void rbIntISR(void)
   180: {
   181:     static uint8_t PORTCHANGE_BUFFER;
   182:     /* Capture Pin Changes */
   183:     PORTCHANGE_BUFFER = PORTB_BUFFER ^ (PORTB_VAL & PORTB_DIR); // Ignore Outputs
   184: 
   185:     if(k8_D12_MASK == (PORTCHANGE_BUFFER&k8_D12_MASK))
   186:     {
   187:         if((RISING == eMod4_Mode) && (LOW == mc_getPinState(D12)))
   188:         {
   189:             /* Ignore and wait for the next interrupt */
   190:         }
   191:         else if((FALLING == eMod4_Mode) && (HIGH == mc_getPinState(D12)))
   192:         {
   193:             /* Ignore and wait for the next interrupt */
   194:         }
   195:         else // CHANGE == eMod1_Mode or coincide of correct mode and pin state
   196:         {
   197:             /* Call User Function */
   198:             pt2INT4();
   199:         }
   200: 
   201:         PORTB_BUFFER &= ~k8_D12_MASK;                   // clear buffered RB4
   202:         PORTB_BUFFER |= PORTB_VAL & k8_D12_MASK;    // store new RB4
   203:     }
   204: 
   205:     if(k8_D13_MASK == (PORTCHANGE_BUFFER&k8_D13_MASK))
   206:     {
   207:         if((RISING == eMod5_Mode) && (LOW == mc_getPinState(D13)))
   208:         {
   209:             /* Ignore and wait for the next interrupt */
   210:         }
   211:         else if((FALLING == eMod5_Mode) && (HIGH == mc_getPinState(D13)))
   212:         {
   213:             /* Ignore and wait for the next interrupt */
   214:         }
   215:         else // CHANGE == eMod2_Mode or coincide of correct mode and pin state
   216:         {
   217:             /* Call User Function */
   218:             pt2INT5();
   219:         }
   220: 
   221:         PORTB_BUFFER &= ~k8_D13_MASK;                   // clear buffered RB5
   222:         PORTB_BUFFER |= PORTB_VAL & k8_D13_MASK;    // store new RB5
   223:     }
   224: 
   225:     if(RB6_MASK == (PORTCHANGE_BUFFER&RB6_MASK))
   226:     {
   227:         if((RISING == eMod6_Mode) && (0 == (PORTB_VAL & RB6_MASK)))
   228:         {
   229:             /* Ignore and wait for the next interrupt */
   230:         }
   231:         else if((FALLING == eMod6_Mode) && (RB6_MASK == (PORTB_VAL & RB6_MASK)))
   232:         {
   233:             /* Ignore and wait for the next interrupt */
   234:         }
   235:         else // CHANGE == eMod3_Mode or coincide of correct mode and pin state
   236:         {
   237:             /* Call User Function */
   238:             pt2INT6();
   239:         }
   240: 
   241:         PORTB_BUFFER &= ~RB6_MASK;                  // clear buffered RB6
   242:         PORTB_BUFFER |= PORTB_VAL & RB6_MASK;   // store new RB6
   243:     }
   244: 
   245:     if(RB7_MASK == (PORTCHANGE_BUFFER&RB7_MASK))
   246:     {
   247:         if((RISING == eMod7_Mode) && (0 == (PORTB_VAL & RB7_MASK)))
   248:         {
   249:             /* Ignore and wait for the next interrupt */
   250:         }
   251:         else if((FALLING == eMod7_Mode) && (RB7_MASK == (PORTB_VAL & RB7_MASK)))
   252:         {
   253:             /* Ignore and wait for the next interrupt */
   254:         }
   255:         else // CHANGE == eMod4_Mode or coincide of correct mode and pin state
   256:         {
   257:             /* Call User Function */
   258:             pt2INT7();
   259:         }
   260: 
   261:         PORTB_BUFFER &= ~RB7_MASK;                  // clear buffered RB7
   262:         PORTB_BUFFER |= PORTB_VAL & RB7_MASK;   // store new RB7
   263:     }
   264: 
   265:     PORTB_BUFFER &= PORTB_DIR;                      // Ensure only inputs are stored
   266: }
   267: #endif
   268: 
   269: /* Private Functions */
   270: /* none */
   271: 
   272: /* end of hal_user_interrupt.c */
   273: //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
